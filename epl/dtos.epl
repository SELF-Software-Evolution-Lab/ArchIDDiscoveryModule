import './queries.eol';
pattern ImplementsSerializable
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("DTO"),
	no superInterfaces: TypeAccess
		from: class.superInterfaces -> select (i | i.type.name = "Serializable"),
	no interfaceSuperClass: TypeAccess
		from: class.superClass.asSet() -> select(c | c.type.superInterfaces.size()>0 and c.type.superInterfaces.select(i | i.type.name = "Serializable").size() > 0) {	
	onmatch {
		var message : String;
	 	message = "Implement Serializable " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(1);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern EmptyConstructor
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("DTO"),
	no constructor: ConstructorDeclaration
		from: class.bodyDeclarations -> select (c | c.isTypeOf(ConstructorDeclaration) and c.proxy = false 
			and c.parameters.size = 0 and (c.body.statements.size = 0 or (c.body.statements.size > 0 and c.body.statements.at(0).isTypeOf(SuperConstructorInvocation)))) {	
	onmatch {
		var message : String;
	 		message = "EmptyConstructor " + class.name;
			message.println();
			var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(2);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern SerializableFields
	classDecl: ClassDeclaration
		guard: classDecl.proxy = false and classDecl.name.endsWith("DTO"),
	field: FieldDeclaration
		guard: field.modifier.static = false
		from: classDecl.bodyDeclarations -> select (c | c.type.type.isKindOf(PrimitiveType)) {	
	onmatch {
		var message : String;
	 	message = "Non-serializable fields in " + classDecl.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(3);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action + " " + field.getName(), classDecl.eContainer().name + "/" + classDecl.name, rule.structuralElement.first.umlElement, rule.severity, classDecl.getPath());
	}
}
	
pattern GettersAndSetters
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("DTO"),
	field: FieldDeclaration
		guard: field.modifier.static = false
		from: class.bodyDeclarations,
	no setter: MethodDeclaration
		from:  class.bodyDeclarations -> select (m | m.name = "set" + field.getName())
		optional: true,
	no getter: MethodDeclaration
		from: class.bodyDeclarations -> select (m | m.name = "get" + field.getName() or m.name = "is" + field.getName())
		optional: setter.isDefined() {
	onmatch {
		var message : String;
 		message = "GettersAndSetters " + class.name + " " + field.getName();
		message.println();
		var comment = new LineComment;
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(4);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action + " for " + field.getName(), class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pre {
	var entityMap = ClassDeclaration.all -> select (c | c.name.endsWith("Entity")).mapBy(c|c.name.substring(0, c.name.indexOf("Entity")));
}

pattern CreateDTOFromEntity
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("DTO") and class.name.indexOf("Detail") = -1,
	no constructor: ConstructorDeclaration
		from: class.bodyDeclarations -> select (c | c.isTypeOf(ConstructorDeclaration) and c.proxy = false 
			and c.parameters.size = 1 and c.parameters.at(0).type.type.name.endsWith("Entity") and c.body.statements.size > 0 
			and c.body.statements.at(0).isTypeOf(IfStatement) and c.body.statements.at(0).expression.rightOperand.isTypeOf(NullLiteral)
			and c.body.statements.at(0).expression.operator = InfixExpressionKind#NOT_EQUALS
			and c.body.statements.at(0).thenStatement.isTypeOf(Block)
			and entityMap.get(class.name.substring(0, class.name.indexOf("DTO"))).isDefined() and 
			entityMap.get(class.name.substring(0, class.name.indexOf("DTO"))).bodyDeclarations 
			-> select (f | f.isTypeOf(FieldDeclaration) and not (f.type.type.name.endsWith("Entity") or f.type.type.name.endsWith(">"))).size <= c.body.statements.at(0).thenStatement.statements.size - 2) {	
	onmatch {
			var message : String;
		 		message = "CreateDTOFromEntity " + class.name; 
				message.println();var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(5);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern toEntity
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("DTO") and class.name.indexOf("Detail") = -1,
	no method: MethodDeclaration
		from:  class.bodyDeclarations -> select (m | m.name = "toEntity" and m.parameters.size = 0 and m.body.statements.size > 1
			and m.body.statements.at(0).isTypeOf(VariableDeclarationStatement) and m.body.statements.at(0).fragments.at(0).initializer.type.type.name.endsWith("Entity")) {
	onmatch {
		var message : String;
 		message = "toEntity " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(6);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern SerializableGettersAndSetters
	classDecl: ClassDeclaration
		guard: classDecl.proxy = false and classDecl.name.endsWith("DTO"),
	field: FieldDeclaration
		guard: field.modifier.static = false
		from: classDecl.bodyDeclarations -> select (c | not c.type.type.isKindOf(PrimitiveType)),
	getter: MethodDeclaration
		from: classDecl.bodyDeclarations -> select (m | (m.name = "get" + field.getName() or m.name = "is" + field.getName()) and (m.returnType.asSet().select(r | r.type.isKindOf(PrimitiveType))).size() > 0)
		optional: true,
	setter: MethodDeclaration
		from: classDecl.bodyDeclarations -> select (m | m.name = "set" + field.getName() and (m.parameters.asSet().select(p | p.type.type.isKindOf(PrimitiveType)).size() > 0))
		optional: getter.isDefined() {
	onmatch {
		var message : String;
	 	message = "Non-serializable getter or setter type for field " + field.getName() + " at " + classDecl.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(18);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action +  " for " + field.getName(), classDecl.eContainer().name + "/" + classDecl.name, rule.structuralElement.first.umlElement, rule.severity, classDecl.getPath());
	}
}

@cached
operation FieldDeclaration getName() {
	return self.fragments.at(0).name.firstToUpperCase();
}