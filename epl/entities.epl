import './queries.eol';
pattern ImplementsSerializable
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Entity"),
	no superInterfaces: TypeAccess
		from: class.superInterfaces -> select (i | i.type.name = "Serializable"),
	no interfaceSuperClass: TypeAccess
		from: class.superClass.asSet() -> select(c | c.isDefined() and c.type.superInterfaces.size()>0 and c.type.superInterfaces.select(i | i.type.name = "Serializable").size() > 0) {	
	onmatch {
		var message : String;
	 	message = "Implement Serializable " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(19);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), "Class");
	}
}

pattern SerializableFields
	classDecl: ClassDeclaration
		guard: classDecl.proxy = false and classDecl.name.endsWith("Entity"),
	field: FieldDeclaration
		guard: field.modifier.static = false
		from: classDecl.bodyDeclarations -> select (c | c.type.type.isKindOf(PrimitiveType)) {	
	onmatch {
		var message : String;
	 	message = "Non-serializable fields in " + classDecl.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(20);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, classDecl.getPath(), field.getName());
	}
}

pattern GettersAndSetters
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Entity"),
	field: FieldDeclaration
		guard: field.modifier.static = false
		from: class.bodyDeclarations,
	no setter: MethodDeclaration
		from:  class.bodyDeclarations -> select (m | m.name = "set" + field.getName())
		optional: true,
	no getter: MethodDeclaration
		from: class.bodyDeclarations -> select (m | m.name = "get" + field.getName() or m.name = "is" + field.getName())
		optional: setter.isDefined() {
	onmatch {
		var message : String;
 		message = "GettersAndSetters " + class.name + " " + field.getName();
		message.println();
		var comment = new LineComment;
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(21);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), field.getName());
	}
}

pattern SerializableGettersAndSetters
	classDecl: ClassDeclaration
		guard: classDecl.proxy = false and classDecl.name.endsWith("Entity"),
	field: FieldDeclaration
		guard: field.modifier.static = false
		from: classDecl.bodyDeclarations -> select (c | not c.type.type.isKindOf(PrimitiveType)),
	getter: MethodDeclaration
		from: classDecl.bodyDeclarations -> select (m | (m.name = "get" + field.getName() or m.name = "is" + field.getName()) and (m.returnType.asSet().select(r | r.isDefined() and r.type.isKindOf(PrimitiveType))).size() > 0)
		optional: true,
	setter: MethodDeclaration
		from: classDecl.bodyDeclarations -> select (m | m.name = "set" + field.getName() and (m.parameters.asSet().select(p | p.isDefined() and p.type.type.isKindOf(PrimitiveType)).size() > 0))
		optional: getter.isDefined() {
	onmatch {
		var message : String;
	 	message = "Non-serializable getter or setter type for field " + field.getName() + " at " + classDecl.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(22);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, classDecl.getPath(), field.getName());
	}
}

pattern GetDependencies
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Entity"),
	field: FieldDeclaration
		from: class.bodyDeclarations,
	injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Inject") {
	onmatch {
		var message : String;
 		message = "Injection " + field.type.type.getPath() + " in " + class.name;
		message.println();
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addDependency(class.getPath(), field.type.type.getPath());
	}
}

@cached
operation FieldDeclaration getName() {
	return self.fragments.at(0).name.firstToUpperCase();
}