pattern StatelessAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Logic"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Stateless") {	
	onmatch {
		var message : String;
 		message = "StatelessAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(14);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}

pattern PersistenceInjection
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Logic"),
	field: FieldDeclaration
		from: class.bodyDeclarations
		guard: field.type.type.name.endsWith("Persistence"),
	no injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Inject") {
	onmatch {
		var message : String;
 		message = "PersistenceInjection " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(15);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}