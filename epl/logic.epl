import './queries.eol';
pattern StatelessAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Logic"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Stateless") {	
	onmatch {
		var message : String;
 		message = "StatelessAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(14);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern PersistenceInjection
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Logic"),
	field: FieldDeclaration
		from: class.bodyDeclarations
		guard: field.type.type.name.endsWith("Persistence"),
	no injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Inject") {
	onmatch {
		var message : String;
 		message = "PersistenceInjection " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(15);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern GetDependencies
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Logic"),
	unit: CompilationUnit
		from: class.originalCompilationUnit.asSet(),
	imp: ImportDeclaration
		from: unit.imports,
	importedClass: ClassDeclaration
		guard: importedClass.proxy = false 
		from: imp.importedElement.asSet() -> select(i | i.isTypeOf(ClassDeclaration)) {
	onmatch {
		var message : String;
 		message = "Import " + importedClass.getPath() + " in " + class.name;
		message.println();
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addDependency(class.getPath(), importedClass.getPath());
	}
}