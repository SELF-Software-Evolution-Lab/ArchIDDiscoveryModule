pattern PathAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Path") {	
	onmatch {
		var message : String;
 		message = "PathAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(10);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}

pattern ConsumesAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Consumes") {	
	onmatch {
		var message : String;
 		message = "ConsumesAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(11);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}

pattern ProducesAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Produces") {	
	onmatch {
		var message : String;
 		message = "ProducesAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(12);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}

pattern LogicInjection
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	field: FieldDeclaration
		from: class.bodyDeclarations
		guard: field.type.type.name.endsWith("Logic"),
	no injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Inject") {
	onmatch {
		var message : String;
 		message = "LogicInjection " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(13);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}

pattern Exceptions
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	method: MethodDeclaration
		from: class.bodyDeclarations,
	annotation: Annotation
		from: method.annotations -> select (a | a.type.type.name = "Path"),
	no statement: IfStatement 
		from: method.body.statements -> select (s | s.isTypeOf(IfStatement) and ((s.thenStatement.isTypeOf(ThrowStatement)
			and s.thenStatement.expression.type.type.name = "WebApplicationException")
			or (s.thenStatement.isTypeOf(Block) and s.thenStatement.statements.size > 0 and s.thenStatement.statements.at(0).isTypeOf(ThrowStatement)
			and s.thenStatement.statements.at(0).expression.type.type.name = "WebApplicationException"))
			and s.expression.isTypeOf(InfixExpression) and s.expression.rightOperand.isTypeOf(NullLiteral)) {
	onmatch {
		var message : String;
 		message = "Exceptions " + class.name + " " + method.name + " " + annotation.type.type.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(16);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.description, rule.nonCompliantExample, rule.compliantSolution, rule.structuralElement.first.umlElement);
	}
}