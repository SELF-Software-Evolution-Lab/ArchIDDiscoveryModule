import './queries.eol';

pre {
	var isDeclaredInOtherResource : Map(String, Boolean);
	for (class in ClassDeclaration.all.select(c | c.name.endsWith("Resource"))){
		isDeclaredInOtherResource.put(class.name, ClassDeclaration.all.select(c | c.name.endsWith("Resource")
		 and c.bodyDeclarations.select(m | m.isTypeOf(MethodDeclaration) and  m.returnType.type.isTypeOf(ParameterizedType)
		  and m.returnType.type.typeArguments.size()> 0 and m.returnType.type.typeArguments.at(0).type.name = class.name).size() > 0).size()>0);
	}
	var detailMap = ClassDeclaration.all -> select (c | c.name.endsWith("DetailDTO")).mapBy(c|c.name.substring(0, c.name.indexOf("DetailDTO")));
}

pattern PathAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource") and not isDeclaredInOtherResource.get(class.name),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Path") {	
	onmatch {
		var message : String;
 		message = "PathAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(10);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern ConsumesAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Consumes") {	
	onmatch {
		var message : String;
 		message = "ConsumesAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(11);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern ProducesAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Produces") {	
	onmatch {
		var message : String;
 		message = "ProducesAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(12);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern LogicInjection
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	field: FieldDeclaration
		from: class.bodyDeclarations
		guard: field.type.type.name.endsWith("Logic"),
	no injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Inject") {
	onmatch {
		var message : String;
 		message = "LogicInjection " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(13);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern Exceptions
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	method: MethodDeclaration
		from: class.bodyDeclarations,
	annotation: Annotation
		from: method.annotations -> select (a | a.type.type.name = "Path"),
	no statement: IfStatement 
		from: method.body.statements -> select (s | s.isTypeOf(IfStatement) and ((s.thenStatement.isTypeOf(ThrowStatement)
			and s.thenStatement.expression.type.type.name = "WebApplicationException")
			or (s.thenStatement.isTypeOf(Block) and s.thenStatement.statements.size > 0 and s.thenStatement.statements.at(0).isTypeOf(ThrowStatement)
			and s.thenStatement.statements.at(0).expression.type.type.name = "WebApplicationException"))
			and s.expression.isTypeOf(InfixExpression) and s.expression.rightOperand.isTypeOf(NullLiteral)) {
	onmatch {
		var message : String;
 		message = "Exceptions " + class.name + " " + method.name + " " + annotation.type.type.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(16);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action + " in method " + method.name, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}
}

pattern getReturnDetail
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	method: MethodDeclaration
		from: class.bodyDeclarations,
	annotation: Annotation
		from: method.annotations -> select(a| a.type.type.name = "GET"),
	no returnType: TypeAccess
		from: method.returnType.asSet()-> select(r |  r.type.name.endsWith("DetailDTO") 
		or (r.type.name.endsWith("DTO") and not detailMap.containsKey(r.type.name.substring(0, r.type.name.indexOf("DTO"))))
		or (r.type.isTypeOf(ParameterizedType) and
		(r.type.type.type.name ="Class" or 
		(r.type.typeArguments.size()>0 and r.type.typeArguments.at(0).type.name.endsWith("DTO") and not detailMap.containsKey(r.type.typeArguments.at(0).type.name.substring(0, r.type.typeArguments.at(0).type.name.indexOf("DTO"))))
		or (r.type.typeArguments.size()>0 and r.type.typeArguments.at(0).type.name.endsWith("DetailDTO")))) ) {
	onmatch {
		var message : String;
 		message = "GET methods must return DetailDTOs or List of them " + class.name + " " + method.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(17);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssueOnGithub(rule.id, rule.action + " in method " + method.name, class.eContainer().name + "/" + class.name, rule.structuralElement.first.umlElement, rule.severity, class.getPath());
	}		
}

pattern GetDependencies
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("Resource"),
	field: FieldDeclaration
		from: class.bodyDeclarations,
	injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Inject") {
	onmatch {
		var message : String;
 		message = "Injection " + field.type.type.getPath() + " in " + class.name;
		message.println();
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addDependency(class.getPath(), field.type.type.getPath());
	}
}