import './queries.eol';

//TODO Autowired of repositories and services

pattern ServiceAnnotation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("ServiceImpl"),
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Service") {	
	onmatch {
		var message : String;
 		message = "ServiceAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(7);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), "Class");
	}
}

pattern ServiceImplementation
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("ServiceImpl"),
	no superInterface: TypeAccess
		from: class.superInterfaces -> select (a | a.type.name = class.name.substring(0, class.name.indexOf("Impl"))) {	
	onmatch {
		var message : String;
 		message = "ServiceImplementation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(8);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), "Class");
	}
}

//TODO Implementation for every interface

pattern OverrideMethods
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("ServiceImpl"),
	method: MethodDeclaration
		from: class.bodyDeclarations -> select(m | m.isTypeOf(MethodDeclaration) and m.modifier.isDefined() and m.modifier.visibility = VisibilityKind#public),
	no annotation: Annotation
		from: method.annotations -> select(a| a.type.type.name = "Override") {	
	onmatch {
		var message : String;
 		message = "OverrideMethods " + class.name + " : " + method.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(9);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), method.name);
	}
}


pattern GetDependencies
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("ServiceImpl"),
	field: FieldDeclaration
		from: class.bodyDeclarations,
	injection: Annotation
		from: field.annotations -> select (f | f.type.type.name = "Autowired") {
	onmatch {
		var message : String;
 		message = "Injection " + field.type.type.getPath() + " in " + class.name;
		message.println();
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addDependency(class.getPath(), field.type.type.getPath());
	}
}

pattern GetDependencies2
	class: ClassDeclaration
		guard: class.proxy = false and class.name.endsWith("ServiceImpl"),
	unit: CompilationUnit
		from: class.originalCompilationUnit.asSet(),
	imp: ImportDeclaration
		from: unit.imports,
	importedClass: ClassDeclaration
		guard: importedClass.proxy = false 
		from: imp.importedElement.asSet() -> select(i | i.isTypeOf(ClassDeclaration)) {
	onmatch {
		var message : String;
 		message = "Import " + importedClass.getPath() + " in " + class.name;
		message.println();
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addDependency(class.getPath(), importedClass.getPath());
	}
}