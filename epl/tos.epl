import './queries.eol';

pattern DataAnnotation
	class: ClassDeclaration
		guard: class.proxy = false,
	package: Package
		from: class.package.asSet()
		guard: package.name = "to" and package.package.name = "api",
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "Data") {	
	onmatch {
		var message : String;
 		message = "DataAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(15);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), "Class");
	}
}

pattern EqualsAndHashCodeAnnotation
	class: ClassDeclaration
		guard: class.proxy = false,
	package: Package
		from: class.package.asSet()
		guard: package.name = "to" and package.package.name = "api",
	no annotation: Annotation
		from: class.annotations -> select (a | a.type.type.name = "EqualsAndHashCode") {	
	onmatch {
		var message : String;
 		message = "EqualsAndHashCodeAnnotation " + class.name;
		message.println();
		var rule: rulesModel!Rule;
		rule = rulesModel!ReferenceArchitecture.all.first.findRule(16);
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addIssue(rule.id, class.getPath(), "Class");
	}
}

pattern GetDependencies
	class: ClassDeclaration
		guard: class.proxy = false,
	package: Package
		from: class.package.asSet()
		guard: package.name = "to" and package.package.name = "api",
	unit: CompilationUnit
		from: class.originalCompilationUnit.asSet(),
	imp: ImportDeclaration
		from: unit.imports,
	importedClass: ClassDeclaration
		guard: importedClass.proxy = false 
		from: imp.importedElement.asSet() -> select(i | i.isTypeOf(ClassDeclaration)) {
	onmatch {
		var message : String;
 		message = "Import " + importedClass.getPath() + " in " + class.name;
		message.println();
		var issues = new Native("archtoring.tools.IssuesTool");
		issues.addDependency(class.getPath(), importedClass.getPath());
	}
}